Описание задачи:

Даны сырые данные , записанные во время проезда робота-автомобиля, в формате yml(аналог XML).
Формат имени файлов name.xxx.nnn.info.yml.gz, где name – имя совокупности проездов(сезон),  xxx – номер проезда, nnn – номер эпизода. 
Как правило один проезд – это непрерывная запись данных с набора устройств.
Для удобства использования данные с одного проезда разбиваются на примерно 10-секундные временные промежутки – эпизоды.
Текстовая информация с устройств в рамках эпизода хранится в info.yml.gz – файле, который соответствует эпизоду. 
Эпизод содержит информацию согласно спецификации yaml, в файле содержится информация от набора датчиков за примерно 10-секундный промежуток времени.
Каждому устройству соответствует свой capture, который собственно получает данные от устройства и отписывает их в файл.
В шапке файла (тег header) описываются все captures, с которых приходят данные в текущий 10-секундный промежуток времени: capture1, capture2, …, captureN.
В описании каждого capture есть имя устройства(тег name:), к которому в дальнейшем привязываются данные, а также представлена дополнительная информация по датчику: серийный номер и так далее.
Данные за ~ 10-секундный промежуток времени содержатся под тегом “shots:” и программно синхронизированы.
То есть, если данные с нескольких датчиков приходят с разных устройств примерно в Δt~50мс. промежуток времени, то они объединятся в отдельном shot.
При этом каждый shot содержит как минимум информацию от одного capture. Shot – ы между собой разделены  с помощью сепаратора “-“.
Каждый shot содержит информацию “grabNumber:” и “grabMsec:”. Первое поле содержит номер shot – а, а в поле “grabMsec:” timestamp (время захвата данных по последнему capture) shot – а в мс. 
Далее в shot – е перечисляются capture ( по имени, заданному в шапке), которые пришли в текущий небольшой промежуток времени Δt.
Каждый capture также содержит поля  “grabNumber:” и “grabMsec:”. Собственно, поле “grabMsec:” содержит отчёты времени с моменты начала программы в мс(timestamp). 


В этих данных присутствует следующий capture: "kvaserVehicleCan", а в нем следующие поля:
"wheelRightFront" - скорость правого переднего колеса автомобиля в отсчетах одометра
"wheelLeftFront"  - скорость левого  переднего колеса автомобиля в отсчетах одометра
"wheelRightRear"  - скорость правого заднего колеса автомобиля в отсчетах одометра
"wheelLeftRear"   - скорость левого  заднего колеса автомобиля в отсчетах одометра

Чтобы перевести отсчеты одометра в метры в секунду, необходимо умножить их на k_odometry = 0.0014925373

Также в capture: "kvaserVehicleCan" присутствует поле "steerinAngle" - угол поворота руля в градусах.

Чтобы перевести его в угол поворота передних колес в радианах, необходимо воспользоваться формулой:
angle_in_radians = 0.000984*steeringAngle - 0.003291 

Также могут понадобиться следующие параметры:
Колесная база автомобиля (расстояние между передней и задней осями): 2.63 метра
Расстояние меду центрами колес на одной оси: 1.51

На основе этих данных предлагается написать программу, восстанавливающую траекторию робота с максимальной точностью, и визулизирующую как входные данные, так и итоговую траекторию.
Рекомендуется пользоваться велосипедной или аккермановской моделями для моделирования кинематики колесного робота.
